// <auto-generated />
using System;
using ManagerLogbook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagerLogbook.Data.Migrations
{
    [DbContext(typeof(ManagerLogbookContext))]
    [Migration("20190623161327_SeedDataCencorWords")]
    partial class SeedDataCencorWords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManagerLogbook.Data.Models.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("BusinessUnitCategoryId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Information")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.Property<int>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitCategoryId");

                    b.HasIndex("TownId");

                    b.ToTable("BusinessUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. Maria Luiza 42",
                            BusinessUnitCategoryId = 1,
                            Email = "grandhotel@abv.bg",
                            Name = "Grand Hotel Sofia",
                            PhoneNumber = "0897654321",
                            TownId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "bul. Vasil Levski 42",
                            BusinessUnitCategoryId = 1,
                            Email = "mariot@abv.bg",
                            Name = "Mariot",
                            PhoneNumber = "0897354213",
                            TownId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "bul. Hristo Botev 32",
                            BusinessUnitCategoryId = 1,
                            Email = "imperial@mail.bg",
                            Name = "Imperial Hotel",
                            PhoneNumber = "0897454324",
                            TownId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "bul. G. Dimitrov 46",
                            BusinessUnitCategoryId = 1,
                            Email = "0897656361",
                            Name = "Hotel Palermo",
                            PhoneNumber = "0897454324",
                            TownId = 1
                        },
                        new
                        {
                            Id = 5,
                            Address = "bul. Marica 43",
                            BusinessUnitCategoryId = 1,
                            Email = "grandhotel@abv.bg",
                            Name = "Grand Hotel Plovdiv",
                            PhoneNumber = "0896654621",
                            TownId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "Student City",
                            BusinessUnitCategoryId = 2,
                            Email = "sweet@dir.bg",
                            Name = "Sweet Sofia",
                            PhoneNumber = "0897554325",
                            TownId = 1
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.BusinessUnitCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BusinessUnitCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hotels"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Restaurants"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.CensoredWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessUnitId");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("CensoredWords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Word = "bastard"
                        },
                        new
                        {
                            Id = 2,
                            Word = "ass"
                        },
                        new
                        {
                            Id = 3,
                            Word = "cock"
                        },
                        new
                        {
                            Id = 4,
                            Word = "dick"
                        },
                        new
                        {
                            Id = 5,
                            Word = "bull shit"
                        },
                        new
                        {
                            Id = 6,
                            Word = "porn"
                        },
                        new
                        {
                            Id = 7,
                            Word = "bitch"
                        },
                        new
                        {
                            Id = 8,
                            Word = "fuck"
                        },
                        new
                        {
                            Id = 9,
                            Word = "Fuck off"
                        },
                        new
                        {
                            Id = 10,
                            Word = "mother fucker"
                        },
                        new
                        {
                            Id = 11,
                            Word = "pussy"
                        },
                        new
                        {
                            Id = 12,
                            Word = "shit"
                        },
                        new
                        {
                            Id = 13,
                            Word = "nigga"
                        },
                        new
                        {
                            Id = 14,
                            Word = "son of a bitch"
                        },
                        new
                        {
                            Id = 15,
                            Word = "scrotum"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Logbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessUnitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("Logbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessUnitId = 5,
                            Name = "Bar and Dinner"
                        },
                        new
                        {
                            Id = 2,
                            BusinessUnitId = 5,
                            Name = "Sweet Valley"
                        },
                        new
                        {
                            Id = 3,
                            BusinessUnitId = 3,
                            Name = "Ambasador"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Image");

                    b.Property<bool>("IsActiveTask");

                    b.Property<int>("LogbookId");

                    b.Property<int?>("NoteCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LogbookId");

                    b.HasIndex("NoteCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.NoteCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NoteCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Task"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TODO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Event"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Maintenance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Supplying issue"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessUnitId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EditedDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OriginalDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Rating");

                    b.Property<bool>("isVisible");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BusinessUnitId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CurrentLogbookId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Picture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9c328abd-e9c0-4271-85fb-c7bb7b8adaaf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8866b3-8436-4712-a5df-c68e40d987e1",
                            Email = "admin@admin.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEObBDoBe8yePbKg7DFaJMf3EdcySgW9m1XFv3o7p5BO5JfZdtUhltTEQeGyqs4EdBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QSV7IPN3NQOB7US3NWWJQV2BOPWLAWQC",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.UsersLogbooks", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("LogbookId");

                    b.HasKey("UserId", "LogbookId");

                    b.HasIndex("LogbookId");

                    b.ToTable("UsersLogbooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "93ad4deb-b9f7-4a98-9585-8b79963aee55",
                            ConcurrencyStamp = "ba8654c2-1117-489c-99b4-957b9f8d9048",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6b32cc6d-2fc9-4808-a0a6-b3877bf9a381",
                            ConcurrencyStamp = "ca0b3fa4-b04f-4fca-9861-b4c6b9369984",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "d525385f-0b2d-4db4-a874-a2bf1b27ae3f",
                            ConcurrencyStamp = "99d4b90d-4058-49a2-979f-66773991fd40",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9c328abd-e9c0-4271-85fb-c7bb7b8adaaf",
                            RoleId = "93ad4deb-b9f7-4a98-9585-8b79963aee55"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.BusinessUnit", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.BusinessUnitCategory", "BusinessUnitCategory")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("BusinessUnitCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerLogbook.Data.Models.Town", "Town")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.CensoredWord", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.BusinessUnit")
                        .WithMany("CensoredWords")
                        .HasForeignKey("BusinessUnitId");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Logbook", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Logbooks")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Note", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.Logbook", "Logbook")
                        .WithMany("Notes")
                        .HasForeignKey("LogbookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerLogbook.Data.Models.NoteCategory", "NoteCategory")
                        .WithMany("Notes")
                        .HasForeignKey("NoteCategoryId");

                    b.HasOne("ManagerLogbook.Data.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.Review", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Reviews")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.User", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Users")
                        .HasForeignKey("BusinessUnitId");
                });

            modelBuilder.Entity("ManagerLogbook.Data.Models.UsersLogbooks", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.Logbook", "Logbook")
                        .WithMany("UsersLogbooks")
                        .HasForeignKey("LogbookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerLogbook.Data.Models.User", "User")
                        .WithMany("UsersLogbooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerLogbook.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManagerLogbook.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
